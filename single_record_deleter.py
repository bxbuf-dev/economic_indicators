# single_record_deleter.py - –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ indicator_values
import sqlite3
from pathlib import Path
import pandas as pd

# --- –ü—É—Ç—å –∫ –ë–î ---
home_dir = Path.home()
DB_PATH = home_dir / 'Documents' / 'economic_indicators.db'

def show_indicators():
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT id, name, full_name,
                   (SELECT COUNT(*) FROM indicator_values WHERE indicator_id = i.id) as values_count
            FROM indicators i
            ORDER BY id
        """)
        
        indicators = cursor.fetchall()
        
        if not indicators:
            print("‚ùå –í –ë–î –Ω–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
            return []
        
        print("üìä –î–û–°–¢–£–ü–ù–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´:")
        print("="*80)
        
        for row in indicators:
            id_val, name, full_name, values_count = row
            print(f"ID: {id_val} | {name} | –ó–∞–ø–∏—Å–µ–π: {values_count}")
            print(f"    {full_name}")
            print("-" * 40)
        
        conn.close()
        return indicators
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
        return []

def show_recent_records(indicator_id, limit=20):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        cursor.execute("SELECT name, full_name FROM indicators WHERE id = ?", (indicator_id,))
        indicator = cursor.fetchone()
        
        if not indicator:
            print(f"‚ùå –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å ID {indicator_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            conn.close()
            return []
        
        name, full_name = indicator
        print(f"\nüìà –ü–û–°–õ–ï–î–ù–ò–ï {limit} –ó–ê–ü–ò–°–ï–ô –î–õ–Ø: {name}")
        print(f"    {full_name}")
        print("="*80)
        
        cursor.execute("""
            SELECT id, date, category, value, created_at
            FROM indicator_values 
            WHERE indicator_id = ?
            ORDER BY date DESC, category
            LIMIT ?
        """, (indicator_id, limit))
        
        records = cursor.fetchall()
        
        if not records:
            print("‚ùå –ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            conn.close()
            return []
        
        print(f"{'ID':<6} | {'–î–∞—Ç–∞':<12} | {'–ö–∞—Ç–µ–≥–æ—Ä–∏—è':<15} | {'–ó–Ω–∞—á–µ–Ω–∏–µ':<10} | {'–°–æ–∑–¥–∞–Ω–æ'}")
        print("-" * 80)
        
        for record in records:
            record_id, date, category, value, created_at = record
            category_str = category if category else "(–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)"
            created_short = created_at[:16] if created_at else ""
            print(f"{record_id:<6} | {date:<12} | {category_str:<15} | {value:<10} | {created_short}")
        
        conn.close()
        return records
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {e}")
        return []

def delete_record_by_id(record_id):
    """–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ ID"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
        cursor.execute("""
            SELECT iv.id, iv.date, iv.category, iv.value, i.name
            FROM indicator_values iv
            JOIN indicators i ON iv.indicator_id = i.id
            WHERE iv.id = ?
        """, (record_id,))
        
        record = cursor.fetchone()
        
        if not record:
            print(f"‚ùå –ó–∞–ø–∏—Å—å —Å ID {record_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            conn.close()
            return False
        
        rec_id, date, category, value, indicator_name = record
        category_str = category if category else "(–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)"
        
        print(f"üóëÔ∏è  –£–î–ê–õ–ï–ù–ò–ï –ó–ê–ü–ò–°–ò:")
        print(f"    ID: {rec_id}")
        print(f"    –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä: {indicator_name}")
        print(f"    –î–∞—Ç–∞: {date}")
        print(f"    –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_str}")
        print(f"    –ó–Ω–∞—á–µ–Ω–∏–µ: {value}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm = input("\n‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ (y/N): ").strip().lower()
        if confirm not in ['y', 'yes', '–¥', '–¥–∞']:
            print("‚úã –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            conn.close()
            return False
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
        cursor.execute("DELETE FROM indicator_values WHERE id = ?", (record_id,))
        
        if cursor.rowcount == 0:
            print("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞")
            conn.close()
            return False
        
        conn.commit()
        conn.close()
        
        print(f"üéâ –ó–∞–ø–∏—Å—å {record_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
        return True
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
        if conn:
            conn.rollback()
            conn.close()
        return False

def delete_latest_records(indicator_id, count=1):
    """–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        cursor.execute("""
            SELECT id, date, category, value
            FROM indicator_values
            WHERE indicator_id = ?
            ORDER BY date DESC, id DESC
            LIMIT ?
        """, (indicator_id, count))
        
        records = cursor.fetchall()
        
        if not records:
            print(f"‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            conn.close()
            return False
        
        print(f"üóëÔ∏è  –£–î–ê–õ–ï–ù–ò–ï –ü–û–°–õ–ï–î–ù–ò–• {len(records)} –ó–ê–ü–ò–°–ï–ô:")
        for record in records:
            rec_id, date, category, value = record
            category_str = category if category else "(–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)"
            print(f"    ID: {rec_id} | {date} | {category_str} | {value}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm = input(f"\n‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ {len(records)} –∑–∞–ø–∏—Å–µ–π (y/N): ").strip().lower()
        if confirm not in ['y', 'yes', '–¥', '–¥–∞']:
            print("‚úã –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            conn.close()
            return False
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏
        record_ids = [record[0] for record in records]
        placeholders = ','.join('?' for _ in record_ids)
        cursor.execute(f"DELETE FROM indicator_values WHERE id IN ({placeholders})", record_ids)
        
        deleted_count = cursor.rowcount
        conn.commit()
        conn.close()
        
        print(f"üéâ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–ø–∏—Å–µ–π!")
        return True
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {e}")
        if conn:
            conn.rollback()
            conn.close()
        return False

def main():
    print("üóëÔ∏è  –°–ö–†–ò–ü–¢ –£–î–ê–õ–ï–ù–ò–Ø –û–¢–î–ï–õ–¨–ù–´–• –ó–ê–ü–ò–°–ï–ô")
    print("="*50)
    
    if not DB_PATH.exists():
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {DB_PATH}")
        return
    
    while True:
        print("\nüìã –ú–ï–ù–Æ:")
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
        print("2. –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞")
        print("3. –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ ID")
        print("4. –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –∑–∞–ø–∏—Å–µ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞")
        print("5. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5): ").strip()
        
        if choice == '1':
            show_indicators()
            
        elif choice == '2':
            try:
                indicator_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: "))
                limit = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–∫–∞–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20): ").strip()
                limit = int(limit) if limit else 20
                show_recent_records(indicator_id, limit)
            except ValueError:
                print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ —á–∏—Å–ª–æ")
                
        elif choice == '3':
            try:
                record_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: "))
                delete_record_by_id(record_id)
            except ValueError:
                print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–ø–∏—Å–∏")
                
        elif choice == '4':
            try:
                indicator_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: "))
                count = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1): ").strip()
                count = int(count) if count else 1
                delete_latest_records(indicator_id, count)
            except ValueError:
                print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ —á–∏—Å–ª–æ")
                
        elif choice == '5':
            print("üëã –í—ã—Ö–æ–¥")
            break
            
        else:
            print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    main()