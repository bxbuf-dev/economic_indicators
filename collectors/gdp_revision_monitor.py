# collectors/gdp_revision_monitor.py
import os
import sys
import pandas as pd
from dotenv import load_dotenv
from datetime import datetime, timedelta

# --- –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ---
load_dotenv()

# --- –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–û–†–ù–ï–í–û–ô –ü–ê–ü–ö–ò –í –ü–£–¢–¨ –ü–û–ò–°–ö–ê –ú–û–î–£–õ–ï–ô ---
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.append(parent_dir)

from dao import IndicatorDAO
from collectors.fred_parser import get_fred_series_history

def main():
    """
    –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä —Ä–µ–≤–∏–∑–∏–π –¥–∞–Ω–Ω—ã—Ö –í–í–ü.
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ FRED —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –≤ –ë–î –∏ –≤—ã—è–≤–ª—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è.
    """
    dao = None
    try:
        print("=== –ú–û–ù–ò–¢–û–† –†–ï–í–ò–ó–ò–ô –î–ê–ù–ù–´–• –í–í–ü –°–®–ê ===")
        dao = IndicatorDAO()

        # –ù–∞—Ö–æ–¥–∏–º ID –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –í–í–ü
        # –ü–æ—Å–∫–æ–ª—å–∫—É –º–µ—Ç–æ–¥–∞ get_all_indicators() –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —á–µ—Ä–µ–∑ add_indicator
        # –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID, –µ—Å–ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —É–∂–µ –µ—Å—Ç—å
        indicator_config = {
            'name': 'us_real_gdp',
            'full_name': 'Real Gross Domestic Product (Billions of Chained 2017 Dollars)',
            'source': 'FRED (Federal Reserve Bank of St. Louis)',
            'description': 'Real gross domestic product is the inflation adjusted value of the goods and services produced by labor and property located in the United States. Seasonally Adjusted Annual Rate.'
        }
        
        indicator_id = dao.add_indicator(**indicator_config)
        if not indicator_id:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏/—Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä 'us_real_gdp'.")
            return
            
        print(f"–ù–∞–π–¥–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –í–í–ü —Å ID: {indicator_id}")

        # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î (–Ω–µ —Ç–æ–ª—å–∫–æ –∑–∞ 2 –≥–æ–¥–∞) –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        all_db_data = dao.get_indicator_values(indicator_id)
        if all_db_data.empty:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –≥–æ–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        cutoff_date = (datetime.now() - timedelta(days=730)).strftime('%Y-%m-%d')
        recent_db_data = all_db_data[all_db_data['date'] >= cutoff_date].copy()
        recent_db_data['date'] = pd.to_datetime(recent_db_data['date'])
        
        print(f"–í—Å–µ–≥–æ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î: {len(all_db_data)}")
        print(f"–î–∞–Ω–Ω—ã—Ö –≤ –ë–î –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –≥–æ–¥–∞: {len(recent_db_data)}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ FRED —Ç–æ–ª—å–∫–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –≥–æ–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–≤–∏–∑–∏–π
        print("–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ FRED –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –≥–æ–¥–∞...")
        fresh_data = get_fred_series_history('GDPC1', start_date=cutoff_date)
        
        if fresh_data.empty:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ FRED.")
            return
            
        print(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–∑ FRED: {len(fresh_data)} –∑–∞–ø–∏—Å–µ–π")

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        print("\n=== –ê–ù–ê–õ–ò–ó –†–ï–í–ò–ó–ò–ô ===")
        revisions_found = False
        new_records_found = False
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –í–°–ï–• –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î (–Ω–µ —Ç–æ–ª—å–∫–æ –∑–∞ 2 –≥–æ–¥–∞)
        all_db_dict = {}
        if not all_db_data.empty:
            for _, row in all_db_data.iterrows():
                # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É YYYY-MM-DD
                if isinstance(row['date'], str):
                    date_key = row['date']
                else:
                    date_key = row['date'].strftime('%Y-%m-%d')
                all_db_dict[date_key] = row['value']
        
        for _, fresh_row in fresh_data.iterrows():
            fresh_date = fresh_row['date'].strftime('%Y-%m-%d')
            fresh_value = fresh_row['value']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –≤ –ë–î –≤–æ–æ–±—â–µ
            if fresh_date in all_db_dict:
                db_value = all_db_dict[fresh_date]
                difference = fresh_value - db_value
                
                # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 0.1 –º–ª—Ä–¥ –¥–æ–ª–ª–∞—Ä–æ–≤, —ç—Ç–æ —Ä–µ–≤–∏–∑–∏—è
                if abs(difference) > 0.1:
                    revisions_found = True
                    percentage_change = (difference / db_value) * 100 if db_value != 0 else 0
                    print(f"üìä {fresh_date}: {db_value:.1f} ‚Üí {fresh_value:.1f} –º–ª—Ä–¥ "
                          f"(—Ä–µ–≤–∏–∑–∏—è: {difference:+.1f} –º–ª—Ä–¥, {percentage_change:+.2f}%)")
            else:
                # –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å (–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î)
                print(f"üÜï {fresh_date}: –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å {fresh_value:.1f} –º–ª—Ä–¥")
                new_records_found = True

        if not revisions_found and not new_records_found:
            print("‚úÖ –†–µ–≤–∏–∑–∏–π –∏ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ. –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã.")
        else:
            if revisions_found:
                print(f"\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ä–µ–≤–∏–∑–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –í–í–ü!")
                print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å gdp_collector.py –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î.")
            if new_records_found:
                print(f"\nüÜï –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –í–í–ü!")
                print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å gdp_collector.py –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        print(f"\n=== –ü–û–°–õ–ï–î–ù–ò–ï –î–ê–ù–ù–´–ï ===")
        
        print("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏ –≤ –ë–î:")
        if not recent_db_data.empty:
            for _, row in recent_db_data.tail(3).iterrows():
                print(f"  {row['date'].strftime('%Y-%m-%d')}: {row['value']:.1f} –º–ª—Ä–¥")
        else:
            print("  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î")
            
        print("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏ –∏–∑ FRED:")
        for _, row in fresh_data.tail(3).iterrows():
            print(f"  {row['date'].strftime('%Y-%m-%d')}: {row['value']:.1f} –º–ª—Ä–¥")

        print("\n=== –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù ===")

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        if dao:
            dao.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

if __name__ == "__main__":
    main()