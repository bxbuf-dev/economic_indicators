#!/usr/bin/env python3
# ism_manufacturing_historical_loader.py

import pandas as pd
import sys
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path (–∏–∑ collectors/)
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

from dao import IndicatorDAO

def load_ism_manufacturing_historical_data(csv_file_path):
    """
    –ó–∞–≥—Ä—É–∑—á–∏–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö ISM Manufacturing PMI –∏–∑ CSV —Ñ–∞–π–ª–∞
    """
    
    dao = IndicatorDAO()
    
    try:
        # 1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        indicator_id = dao.add_indicator(
            name="us_ism_manufacturing_pmi",
            full_name="ISM Manufacturing Purchasing Managers Index",
            source="ISM",
            description="ISM Manufacturing PMI and sub-indices including New Orders, Production, Employment, etc."
        )
        
        if not indicator_id:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞")
            return False
            
        print(f"‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å ID: {indicator_id}")
        
        # 2. –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
        print(f"üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑: {csv_file_path}")
        df = pd.read_csv(csv_file_path)
        
        # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—ã
        df['Month'] = pd.to_datetime(df['Month'], format='%m/%d/%y')
        df['date'] = df['Month'].dt.strftime('%Y-%m-%d')
        
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π —Å {df['Month'].min().strftime('%Y-%m-%d')} –ø–æ {df['Month'].max().strftime('%Y-%m-%d')}")
        
        # 4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        column_mapping = {
            'PMI': 'headline',
            'New Orders': 'new_orders', 
            'Production': 'production',
            'Employment': 'employment',
            'Deliveries': 'supplier_deliveries',
            'Inventories': 'inventories',
            'Custom Inv': 'customers_inventories',
            'Prices': 'prices_paid',
            'Ord Backlog': 'order_backlog',
            'Exports': 'exports',
            'Imports': 'imports'
        }
        
        # 5. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        total_records = 0
        
        for _, row in df.iterrows():
            date_str = row['date']
            
            for csv_column, category in column_mapping.items():
                if csv_column in df.columns and pd.notna(row[csv_column]):
                    value = float(row[csv_column])
                    
                    dao.add_indicator_value(
                        indicator_id=indicator_id,
                        date=date_str,
                        value=value,
                        category=category
                    )
                    total_records += 1
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {total_records} –∑–∞–ø–∏—Å–µ–π –≤ –ë–î")
        print(f"üìà –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {list(column_mapping.values())}")
        
        # 6. –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìä –°–í–û–î–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
        for csv_col, category in column_mapping.items():
            if csv_col in df.columns:
                valid_count = df[csv_col].notna().sum()
                if valid_count > 0:
                    avg_val = df[csv_col].mean()
                    min_val = df[csv_col].min() 
                    max_val = df[csv_col].max()
                    print(f"  {category:20} | {valid_count:3d} –∑–∞–ø–∏—Å–µ–π | –°—Ä–µ–¥–Ω–µ–µ: {avg_val:5.1f} | –î–∏–∞–ø–∞–∑–æ–Ω: {min_val:5.1f}-{max_val:5.1f}")
        
        return True
        
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {csv_file_path}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    finally:
        dao.close()

def main():
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞
    script_dir = Path(__file__).parent
    csv_path = script_dir.parent / "data" / "ism_manufacturing_historical.csv"
    
    print("üè≠ ISM Manufacturing PMI - –ó–∞–≥—Ä—É–∑—á–∏–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    print(f"üîç –ò—â–µ–º —Ñ–∞–π–ª: {csv_path}")
    print(f"üìÇ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {Path.cwd()}")
    
    if not csv_path.exists():
        print(f"‚ùå –§–∞–π–ª {csv_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print(f"   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ –ø—É—Ç–∏: {csv_path}")
        # –ü–æ–∫–∞–∂–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ data/ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        data_dir = script_dir.parent / "data"
        if data_dir.exists():
            print(f"   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ {data_dir}:")
            for file in data_dir.iterdir():
                print(f"     - {file.name}")
        else:
            print(f"   –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {data_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return
    
    success = load_ism_manufacturing_historical_data(str(csv_path))
    
    if success:
        print("\nüéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("   –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –ø–∞—Ä—Å–µ—Ä—É —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞ ISM")
    else:
        print("\n‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")

if __name__ == "__main__":
    main()