# universal_record_deleter.py - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
import sqlite3
from dotenv import load_dotenv
import os
from pathlib import Path
import pandas as pd

# --- –ü—É—Ç—å –∫ –ë–î ---2
load_dotenv() # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
home_dir = Path.home()
DB_SUBDIR = os.getenv("DB_SUBDIR", "Documents")
DB_FILE = os.getenv("DB_FILE", "economic_indicators.db")
DB_PATH = home_dir / DB_SUBDIR / DB_FILE

def show_indicators():
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø–∏—Å–µ–π –≤–æ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT i.id, i.name, i.full_name,
                   (SELECT COUNT(*) FROM indicator_values WHERE indicator_id = i.id) as values_count,
                   (SELECT COUNT(*) FROM indicator_releases WHERE indicator_id = i.id) as releases_count,
                   (SELECT COUNT(*) FROM comments WHERE indicator_id = i.id) as comments_count
            FROM indicators i
            ORDER BY i.id
        """)
        
        indicators = cursor.fetchall()
        
        if not indicators:
            print("‚ùå –í –ë–î –Ω–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
            return []
        
        print("üìä –î–û–°–¢–£–ü–ù–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´:")
        print("="*90)
        
        for row in indicators:
            id_val, name, full_name, values_count, releases_count, comments_count = row
            print(f"ID: {id_val} | {name}")
            print(f"    üìà Values: {values_count} | üì∞ Releases: {releases_count} | üí¨ Comments: {comments_count}")
            print(f"    {full_name}")
            print("-" * 50)
        
        conn.close()
        return indicators
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
        return []

def show_recent_data(indicator_id, limit=2):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ (–ø–æ –¥–∞—Ç–∞–º) –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        cursor.execute("SELECT name, full_name FROM indicators WHERE id = ?", (indicator_id,))
        indicator = cursor.fetchone()
        
        if not indicator:
            print(f"‚ùå –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å ID {indicator_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            conn.close()
            return {}
        
        name, full_name = indicator
        print(f"\nüìà –ü–û–°–õ–ï–î–ù–ò–ï {limit} –ó–ê–ü–ò–°–ï–ô –î–õ–Ø: {name}")
        print(f"    {full_name}")
        print("="*90)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        cursor.execute("""
            SELECT DISTINCT date FROM (
                SELECT date FROM indicator_values WHERE indicator_id = ?
                UNION
                SELECT date FROM indicator_releases WHERE indicator_id = ?
                UNION  
                SELECT date FROM comments WHERE indicator_id = ?
            )
            ORDER BY date DESC
            LIMIT ?
        """, (indicator_id, indicator_id, indicator_id, limit))
        
        recent_dates = [row[0] for row in cursor.fetchall()]
        
        if not recent_dates:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞")
            conn.close()
            return {}
        
        print(f"–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞ –¥–∞—Ç—ã: {', '.join(recent_dates)}")
        
        data = {'dates': recent_dates, 'values': [], 'releases': [], 'comments': []}
        
        # –î–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        for date_str in recent_dates:
            print(f"\nüóìÔ∏è  –î–ê–¢–ê: {date_str}")
            print("="*50)
            
            # VALUES –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã
            cursor.execute("""
                SELECT id, date, category, value, created_at
                FROM indicator_values 
                WHERE indicator_id = ? AND date = ?
                ORDER BY category
            """, (indicator_id, date_str))
            
            date_values = cursor.fetchall()
            data['values'].extend(date_values)
            
            if date_values:
                print("üìà VALUES:")
                print(f"{'ID':<6} | {'–ö–∞—Ç–µ–≥–æ—Ä–∏—è':<15} | {'–ó–Ω–∞—á–µ–Ω–∏–µ':<10} | {'–°–æ–∑–¥–∞–Ω–æ'}")
                print("-" * 50)
                for record in date_values:
                    record_id, date, category, value, created_at = record
                    category_str = category if category else "(–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)"
                    created_short = created_at[:16] if created_at else ""
                    print(f"{record_id:<6} | {category_str:<15} | {value:<10} | {created_short}")
            
            # RELEASES –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã
            cursor.execute("""
                SELECT id, date, category, source_url, created_at
                FROM indicator_releases 
                WHERE indicator_id = ? AND date = ?
                ORDER BY category
            """, (indicator_id, date_str))
            
            date_releases = cursor.fetchall()
            data['releases'].extend(date_releases)
            
            if date_releases:
                print("\nüì∞ RELEASES:")
                print(f"{'ID':<6} | {'–ö–∞—Ç–µ–≥–æ—Ä–∏—è':<15} | {'URL':<30} | {'–°–æ–∑–¥–∞–Ω–æ'}")
                print("-" * 65)
                for record in date_releases:
                    record_id, date, category, source_url, created_at = record
                    category_str = category if category else "(–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)"
                    url_short = (source_url[:27] + "...") if source_url and len(source_url) > 30 else (source_url or "")
                    created_short = created_at[:16] if created_at else ""
                    print(f"{record_id:<6} | {category_str:<15} | {url_short:<30} | {created_short}")
            
            # COMMENTS –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã
            cursor.execute("""
                SELECT id, date, comment_text, created_at
                FROM comments 
                WHERE indicator_id = ? AND date = ?
                ORDER BY created_at
            """, (indicator_id, date_str))
            
            date_comments = cursor.fetchall()
            data['comments'].extend(date_comments)
            
            if date_comments:
                print("\nüí¨ COMMENTS:")
                print(f"{'ID':<6} | {'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π':<40} | {'–°–æ–∑–¥–∞–Ω–æ'}")
                print("-" * 55)
                for record in date_comments:
                    record_id, date, comment_text, created_at = record
                    comment_short = (comment_text[:37] + "...") if len(comment_text) > 40 else comment_text
                    created_short = created_at[:16] if created_at else ""
                    print(f"{record_id:<6} | {comment_short:<40} | {created_short}")
            
            if not date_values and not date_releases and not date_comments:
                print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç—É –¥–∞—Ç—É")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_records = len(data['values']) + len(data['releases']) + len(data['comments'])
        print(f"\nüìä –ò–¢–û–ì–û –ó–ê {len(recent_dates)} –î–ê–¢:")
        print(f"    üìà Values: {len(data['values'])}")
        print(f"    üì∞ Releases: {len(data['releases'])}")
        print(f"    üí¨ Comments: {len(data['comments'])}")
        print(f"    üìã –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_records}")
        
        conn.close()
        return data
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {e}")
        return {}

# --- –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def show_categories(indicator_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        cursor.execute("SELECT name, full_name FROM indicators WHERE id = ?", (indicator_id,))
        indicator = cursor.fetchone()
        if not indicator:
            print(f"‚ùå –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å ID {indicator_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            conn.close()
            return []

        name, full_name = indicator
        print(f"\nüìÇ –ö–ê–¢–ï–ì–û–†–ò–ò –î–õ–Ø: {name}")
        print(f"    {full_name}")
        print("="*50)

        cursor.execute("""
            SELECT DISTINCT category 
            FROM indicator_values 
            WHERE indicator_id = ?
            ORDER BY category
        """, (indicator_id,))
        categories = [row[0] for row in cursor.fetchall()]

        if categories:
            for cat in categories:
                cat_str = cat if cat else "(–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)"
                print(f" - {cat_str}")
        else:
            print("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        conn.close()
        return categories

    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        return []

def delete_by_date_and_indicator(indicator_id, date_str):
    ...  # –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

def delete_record_by_table_and_id(table_name, record_id):
    ...  # –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

def main():
    print("üóëÔ∏è  –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –£–î–ê–õ–Ø–¢–û–† –î–ê–ù–ù–´–•")
    print("="*50)
    
    if not DB_PATH.exists():
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {DB_PATH}")
        return
    
    while True:
        print("\nüìã –ú–ï–ù–Æ:")
        print("0. –í—ã—Ö–æ–¥")
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
        print("2. –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞")
        print("3. –£–¥–∞–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—É –∏ –¥–∞—Ç–µ")
        print("4. –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –ø–æ —Ç–∞–±–ª–∏—Ü–µ –∏ ID")
        print("5. –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-6): ").strip()
        
        if choice == '1':
            show_indicators()
            
        elif choice == '2':
            try:
                indicator_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: "))
                limit = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ó–ê–ü–ò–°–ï–ô (–ø–æ –¥–∞—Ç–∞–º) –¥–ª—è –ø–æ–∫–∞–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2): ").strip()
                limit = int(limit) if limit else 2
                show_recent_data(indicator_id, limit)
            except ValueError:
                print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ —á–∏—Å–ª–æ")
                
        elif choice == '3':
            ...  # –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                
        elif choice == '4':
            ...  # –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                
        elif choice == '0':
            print("üëã –í—ã—Ö–æ–¥")
            break

        elif choice == '5':
            try:
                indicator_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: "))
                show_categories(indicator_id)
            except ValueError:
                print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")
                
        else:
            print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    main()
